%How you downloaded the corpus of images
% In my project, I used flickr.photos.getRecent to get the photos
% downloaded. API keys and website are autogenerated on flickr. 

%How you determine the quality of match 
%I use mean color to match the image to a certain block. (Mean color on three channels)
%Then I used square of the (sum of the difference between the image and a
%certain block on three channels) to find the distance between the block
%and image. Then I choose three pictures with the least distance. 


%A targeted image is divided into blocks, if width and height cannot be
%divided by block_size, then margin is utilized. 

%Introduce randomness
%As I selected the three pictures with least distance, one of them is
%randonly chosen to be the image put into the block.

infos=get_photos();
im_num = size(infos, 1);
%an image is stored with the link of the images, values for the color of
%the image, isrgb tells whether a images is grayscale or 
imdata_list = struct( "url", cell(im_num, 1),"color", cell(im_num, 1), "isrgb", cell(im_num, 1));
for i = 1:im_num
    imdata = get_flickr_images(infos(i));
    imdata_list(i) = imdata;
end

im_list = imdata_list([imdata_list.isrgb] == 1);

base_url = "https://raw.githubusercontent.com/cpysleeper/comp572hw4/main/";
target_ims = ["final_photo_by_me.jpg","knifes.jpg","Cat03.jpg","sun%20and%20hill.jpg","grass%20.jpg"];

for i = 1:length(target_ims)
%for a whole mosaic image, there are 50x50 blocks, each small block is an
%image
    subim_size = 40;

    url = base_url + target_ims(i);
    target_im = imread(url);
    im_mosaic = generate_mosaics(target_im, im_list, subim_size);
    figure; subplot(1, 2, 1), imshow(target_im);
    subplot(1, 2, 2), imshow(im_mosaic);
end


%%
function result = generate_mosaics(target_im, im_list, subim_size)
%subim_size is the size of the blocks of subimages within the whole mosaic
%picture and such blocks are assumed to be squares
    result = zeros(size(target_im));
    result = im2uint8(result);
    colors = vertcat(im_list.color);
    [y,x,~] = size(target_im);

%conditions on when y/x has residuals when divided by size of blocks 
    if mod(y,subim_size)==0
        y_num = [1:subim_size:y,y+1];
    else
        y_margin = floor((y - floor(y/subim_size)*subim_size) )+1;
        y_num = [1, y_margin:subim_size:y, y+1];
    end
    if mod(x,subim_size)==0
        x_num = [1:subim_size:x,x+1];
    else
        x_margin = floor((x - floor(x/subim_size)*subim_size) )+1;
        x_num = [1, x_margin:subim_size:x, x+1];
    end
    
    for j=1:length(y_num)-1
        y_be = y_num(j);
        y_ed = y_num(j+1)-1;
        for i=1:length(x_num)-1
            x_be = x_num(i);
            x_ed=x_num(i+1)-1;
            try
            block = target_im(y_be:y_ed, x_be:x_ed, :);
            catch 
                disp("error");
                fprintf("j = %d, i = %d\n", j, i);
                
            end
            block_color = get_mean_color(block);
%square distance between the mean color of picture and the target block is
%used to choose similar imagesfor mosaics
            color_distance = colors - block_color;
            square_dis = sum((color_distance).^2,2);
            
%to introduce randomness, one the three pics with the closet distance is randomly chosen
            [~, indexes] = mink(square_dis, 3);
            index = randsample(3, 1);
            
            im_url = im_list(indexes(index)).url;
            mosaic_im = imread(im_url,'jpg');
                mosaic_im = imresize(mosaic_im, [y_ed-y_be+1 x_ed-x_be+1]);
                result(y_be:y_ed, x_be:x_ed, :) = mosaic_im(:,:,:);
            
        end
    end
end

function photos = get_photos()
%api generated on website https://www.flickr.com/services/apps/create/noncommercial/?
%url generated on website https://www.flickr.com/services/api/explore/flickr.photos.getRecent    
    photos = [];
    for i = 1:1
        url = "https://www.flickr.com/services/rest/?method=flickr.photos.getRecent&api_key=dfab7aa5a5d01718e22061a58f3595ef&per_page=500&page="+ int2str(i)+"&format=json";
        data = webread(url);

        prefix = "jsonFlickrApi(";
        suffix = ")";
        regex  = [['^' prefix],[suffix '$']];
        replacements = ['', ''];
        data = regexprep(data, regex, replacements);

        value = jsondecode(data);
        photos = cat(1, photos, value.photos.photo);
    end
end

function color = get_mean_color(im)
    red = mean2(im(:, :, 1));
    green = mean2(im(:, :, 2));
    blue = mean2(im(:, :, 3));
    color = [red green blue];
end

%filter grayscale images
function imdata = get_flickr_images(info)
    url = "https://live.staticflickr.com/"+info.server+"/"+info.id+"_"+info.secret+"_s.jpg";
    try
        im = imread(url, 'jpg');
        [~, ~, numberOfColorChannels] = size(im);
        if numberOfColorChannels > 1
            is_rgb = 1;
            color = get_mean_color(im);
            imdata = struct("url", url, "color", color, "isrgb", is_rgb);
        else
            is_rgb =0;
            imdata = struct("url", url, "color", [], "isrgb", is_rgb);
        end
    catch
        fprintf("images not found are skipped")
        imdata =struct("url", "", "color", [], "isrgb", 0);
    end
end